{"version":3,"sources":["containers/routes.ts","containers/TheContent.tsx","redux/reducers/sidebar.ts","containers/TheHeader.tsx","containers/_nav.tsx","containers/TheSidebar.tsx","containers/TheLayout.tsx","App.tsx","redux/reducers/rootReducer.ts","services/Api.ts","redux/sagas/userSaga.ts","redux/sagas/rootSaga.ts","redux/store.ts","index.tsx","redux/hooks.ts","redux/reducers/user.ts"],"names":["routes","path","exact","name","component","React","lazy","a","loading","className","TheContent","fluid","fallback","map","route","idx","render","props","from","to","memo","sidebar","createSlice","initialState","sidebarShow","reducers","set","state","action","payload","actions","selectSidebarShow","TheHeader","dispatch","useAppDispatch","useAppSelector","withSubheader","inHeader","onClick","val","undefined","includes","style","alignSelf","_nav","_tag","TheSidebar","show","onShowChange","items","navigation","components","CSidebarNavDivider","CSidebarNavDropdown","CSidebarNavItem","CSidebarNavTitle","TheLayout","flexDirection","marginTop","App","Suspense","rootReducer","combineReducers","user","userReducer","sidebarReducer","autoBind","require","api","baseURL","this","apisauce","create","headers","Accept","timeout","params","get","userId","data","accounts","each","attributes","error","userSaga","call","res","put","UserActions","userSuccess","userFailure","errorMessage","Error","message","all","takeLatest","rootSaga","fork","sagaMiddleware","createSagaMiddleware","store","configureStore","reducer","middleware","getDefaultMiddleware","concat","logger","run","options","position","positions","TOP_RIGHT","offset","transition","transitions","SCALE","ReactDOM","template","AlertTemplate","document","getElementById","useDispatch","useSelector","userSlice","fetching","userRequest","clear","clearError"],"mappings":"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","file":"static/js/main.aa5e7441.chunk.js","sourcesContent":["import React from 'react'\n\nconst AccountsSearch = React.lazy(\n  async () => await import('../views/accountsSearch/AccountsSearch')\n)\nconst AccountDisplay = React.lazy(\n  async () => await import('../views/accountsSearch/AccountDisplay')\n)\n\nconst routes = [\n  { path: '/', exact: true, name: 'Home' },\n  {\n    path: '/accountsSearch',\n    exact: true,\n    name: 'AccountsSearch',\n    component: AccountsSearch\n  },\n  {\n    path: '/accountDisplay/:userId',\n    name: 'AccountsDisplay',\n    component: AccountDisplay\n  }\n]\n\nexport default routes\n","import React, { Suspense } from 'react'\nimport {\n  Redirect,\n  Route,\n  Switch\n} from 'react-router-dom'\nimport { CContainer, CFade } from '@coreui/react'\n\n// routes config\nimport routes from './routes'\n\nconst loading = (\n  <div className='pt-3 text-center'>\n    <div className='sk-spinner sk-spinner-pulse' />\n  </div>\n)\n\nconst TheContent = (): JSX.Element => {\n  return (\n    <main className='c-main'>\n      <CContainer fluid>\n        <Suspense fallback={loading}>\n          <Switch>\n            {routes.map((route, idx) => {\n              return (route?.component != null) && (\n                <Route\n                  key={idx}\n                  path={route.path}\n                  exact={route.exact}\n                  // name={route.name}\n                  render={(props: any) => (\n                    <CFade>\n                      <route.component {...props} />\n                    </CFade>\n                  )}\n                />\n              )\n            })}\n            <Redirect from='/' to='/accountsSearch' />\n          </Switch>\n        </Suspense>\n      </CContainer>\n    </main>\n  )\n}\n\nexport default React.memo(TheContent)\n","import { createSlice } from '@reduxjs/toolkit'\nimport { RootState } from '../store'\nexport interface SidebarStatus {\n  sidebarShow: boolean | '' | 'responsive' | undefined\n}\n\nconst initialState: SidebarStatus = {\n  sidebarShow: 'responsive'\n}\nexport const sidebar = createSlice({\n  name: 'sidebar',\n  initialState,\n  reducers: {\n    set: (state, action) => {\n      state.sidebarShow = action.payload\n    }\n  }\n})\n\n// Action creators are generated for each case reducer function\nexport const { set } = sidebar.actions\nexport const selectSidebarShow = (\n  state: RootState\n): boolean | '' | 'responsive' | undefined => state.sidebar.sidebarShow\n\nexport default sidebar.reducer\n","import { CHeader, CToggler } from '@coreui/react'\nimport React from 'react'\nimport { useAppDispatch, useAppSelector } from '../redux/hooks'\nimport { selectSidebarShow, set } from '../redux/reducers/sidebar'\n\nconst TheHeader = (): JSX.Element => {\n  const dispatch = useAppDispatch()\n  const sidebarShow = useAppSelector(state => selectSidebarShow(state))\n\n  const toggleSidebar = (): void => {\n    const val = [true, 'responsive', undefined].includes(sidebarShow) ? false : 'responsive'\n    dispatch(set(val))\n  }\n\n  return (\n    <CHeader withSubheader>\n      <CToggler\n        inHeader\n        className='ml-3 d-md-down-none'\n        onClick={toggleSidebar}\n      />\n      <h4 className='card-title mb-0' style={{ alignSelf: 'center' }}>Account Management</h4>\n    </CHeader>\n  )\n}\n\nexport default TheHeader\n","\nconst _nav = [\n  {\n    _tag: 'CSidebarNavItem',\n    name: 'Accounts Search',\n    to: '/accountsSearch'\n  }\n\n]\n\nexport default _nav\n","import React from 'react'\nimport { useAppSelector, useAppDispatch } from '../redux/hooks'\nimport { set, selectSidebarShow } from '../redux/reducers/sidebar'\nimport {\n  CCreateElement,\n  CSidebar,\n  CSidebarNav,\n  CSidebarNavDivider,\n  CSidebarNavTitle,\n  CSidebarMinimizer,\n  CSidebarNavDropdown,\n  CSidebarNavItem\n} from '@coreui/react'\n\n// sidebar nav config\nimport navigation from './_nav'\nconst TheSidebar = (): JSX.Element => {\n  const dispatch = useAppDispatch()\n  const show = useAppSelector(state => selectSidebarShow(state))\n\n  return (\n    <CSidebar\n      show={show}\n      onShowChange={(val: boolean | string | undefined) => dispatch(set(val))}\n      className='sidebarTopPos'\n    >\n      <CSidebarNav>\n\n        <CCreateElement\n          items={navigation}\n          components={{\n            CSidebarNavDivider,\n            CSidebarNavDropdown,\n            CSidebarNavItem,\n            CSidebarNavTitle\n          }}\n        />\n      </CSidebarNav>\n      <CSidebarMinimizer className='c-d-md-down-none' />\n    </CSidebar>\n  )\n}\n\nexport default React.memo(TheSidebar)\n","import React from 'react'\nimport {\n  TheContent,\n  TheSidebar,\n  TheHeader\n} from './index'\n\nconst TheLayout = (): JSX.Element => {\n  return (\n    <div style={{ flexDirection: 'column' }}>\n      <TheHeader />\n      <div className='c-app c-default-layout'>\n        <TheSidebar />\n        <div className='c-wrapper' style={{ marginTop: 56 }}>\n          <div className='c-body'>\n            <TheContent />\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default TheLayout\n","import React from 'react'\nimport { HashRouter, Route, Switch } from 'react-router-dom'\nimport './scss/style.scss'\nimport TheLayout from './containers/TheLayout'\nconst loading = (\n  <div className='pt-3 text-center'>\n    <div className='sk-spinner sk-spinner-pulse' />\n  </div>\n)\n\n// Containers\n\n// Pages\n\nconst App = (): JSX.Element => {\n  return (\n    <HashRouter>\n      <React.Suspense fallback={loading}>\n        <Switch>\n          <Route\n            path='/'\n          >\n            <TheLayout />\n          </Route>\n        </Switch>\n      </React.Suspense>\n    </HashRouter>\n  )\n}\n\nexport default App\n","import { combineReducers } from 'redux'\nimport { reducer as userReducer } from './user'\nimport sidebarReducer from './sidebar'\nconst rootReducer = combineReducers({\n  user: userReducer,\n  sidebar: sidebarReducer\n})\n\nexport type AppState = ReturnType<typeof rootReducer>\n\nexport default rootReducer\n","import apisauce from 'apisauce'\nimport { UserRequest } from '../redux/sagas/userSaga'\nconst autoBind = require('react-autobind')\nexport interface IResponse {\n  data: any\n  error: string | null\n\n}\nclass API {\n  api: any\n  constructor (baseURL = 'https://sample-accounts-api.herokuapp.com/') {\n    this.api = apisauce.create({\n      baseURL,\n      headers: {\n        'Content-Type': 'application/json',\n        Accept: 'application/json'\n      },\n      timeout: 15000\n    })\n    autoBind(this)\n  }\n\n  async user (params: UserRequest): Promise<IResponse> {\n    const data = await this.api.get(`users/${params?.userId}/accounts`)\n    if (data?.data !== null) {\n      const accounts = data.data.map((each: any) => {\n        return each.attributes\n      })\n      return {\n        error: null,\n        data: {\n          userId: params?.userId,\n          accounts\n        }\n      }\n    } else {\n      return {\n        error: 'user not found',\n        data: null\n      }\n    }\n  }\n}\n\nconst api = new API()\n\nexport default api\n","import { all, call, put, takeLatest } from '@redux-saga/core/effects'\nimport { AnyAction } from 'redux'\nimport api from '../../services/Api'\nimport { actions as UserActions } from '../reducers/user'\n\nexport interface UserRequest {\n  userId: string\n}\nexport function * user (api: any, action: AnyAction): any {\n  try {\n    const res = yield call(api, action.payload)\n    if (res.error === null) {\n      yield put(UserActions.userSuccess(res.data))\n    } else {\n      yield put(UserActions.userFailure(res.error))\n    }\n  } catch (error) {\n    let errorMessage = 'Failed to do something exceptional'\n    if (error instanceof Error) {\n      errorMessage = error.message\n    }\n    yield put(UserActions.userFailure(errorMessage))\n  }\n}\n\n/*\n  Starts worker saga on latest dispatched `FETCH_USER_REQUEST` action.\n  Allows concurrent increments.\n*/\nfunction * userSaga (): any {\n  yield all([takeLatest('user/userRequest', user, api.user)])\n}\n\nexport default userSaga\n","import { all, fork } from 'redux-saga/effects'\nimport userSaga from './userSaga'\nexport default function * rootSaga (): any {\n  yield all([fork(userSaga)])\n}\n","import { configureStore } from '@reduxjs/toolkit'\nimport logger from 'redux-logger'\nimport createSagaMiddleware from 'redux-saga'\nimport rootReducer from './reducers/rootReducer'\nimport rootSaga from './sagas/rootSaga'\n\nconst sagaMiddleware = createSagaMiddleware()\n\nconst store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) => getDefaultMiddleware().concat(sagaMiddleware).concat(logger)\n})\nsagaMiddleware.run(rootSaga)\n\nexport type RootState = ReturnType<typeof store.getState>\nexport type AppDispatch = typeof store.dispatch\n\nexport default store\n","import 'react-app-polyfill/ie11' // For IE 11 support\r\nimport 'react-app-polyfill/stable'\r\nimport 'core-js'\r\nimport React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\n\r\nimport { Provider } from 'react-redux'\r\nimport store from './redux/store'\r\nimport { transitions, positions, Provider as AlertProvider } from 'react-alert'\r\nimport AlertTemplate from 'react-alert-template-basic'\r\n// optional configuration\r\nconst options = {\r\n  position: positions.TOP_RIGHT,\r\n  timeout: 5000,\r\n  offset: '60px',\r\n  transition: transitions.SCALE\r\n}\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <AlertProvider template={AlertTemplate} {...options}>\r\n      <App />\r\n    </AlertProvider>\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'\nimport { RootState, AppDispatch } from './store'\n\n// Use throughout your app instead of plain `useDispatch` and `useSelector`\nexport const useAppDispatch = (): AppDispatch => useDispatch<AppDispatch>()\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector\n","import { createSlice } from '@reduxjs/toolkit'\n\n/* ------------- Initial State ------------- */\ninterface UserAccount {\n  id: number\n  name: string\n  balance: number\n}\nexport interface User {\n  userId: number | null\n  accounts: UserAccount[]\n}\n\nexport interface UserState {\n  data: null | User\n  error: null | string\n  fetching: boolean\n}\n\nconst initialState: UserState = {\n  data: null,\n  error: null,\n  fetching: false\n}\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n    userRequest: (state, action) => {\n      state.fetching = true\n      state.data = null\n      state.error = null\n    },\n    userSuccess: (state, action) => {\n      state.fetching = false\n      state.data = action.payload\n      state.error = null\n    },\n    userFailure: (state, action) => {\n      state.fetching = false\n      state.data = null\n      state.error = action.payload\n    },\n    clear: (state) => {\n      state.data = null\n      state.error = null\n      state.fetching = false\n    },\n    clearError: (state) => {\n      state.error = null\n    }\n  }\n})\n\n// Action creators are generated for each case reducer function\nexport const { reducer, actions } = userSlice\n"],"sourceRoot":""}